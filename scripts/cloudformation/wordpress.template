{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "AsgMinSize": {
            "Type": "Number",
            "Description": "Minimum size and initial desired capacity of Auto Scaling Group",
            "Default": "2"
        },
        "AsgMaxSize": {
            "Type": "Number",
            "Description": "Maximum size of Auto Scaling Group",
            "Default": "4"
        },
        "MySQLMasterUserName": {
            "Description": "UserName for the MySQL master user",
            "Type": "String",
            "MinLength": "5",
            "Default": "admin"
        },
        "MySQLMasterUserPassword": {
			"NoEcho": "true",
            "Description": "Password for the MySQL master user",
            "Type": "String",
            "MinLength": "8"
        },
        "AZ1": {
            "Description": "The Availability Zone #1",
            "Type": "AWS::EC2::AvailabilityZone::Name",
            "MinLength": "1",
            "Default": "us-east-2a"
        },
        "AZ2": {
            "Description": "The Availability Zone #2",
            "Type": "AWS::EC2::AvailabilityZone::Name",
            "MinLength": "1",
            "Default": "us-east-2b"
        },
        "DigitalCertificateId": {
            "Description": "The Digital Certificate Identifier issued for SSL and managed by ACM.",
            "Type": "String",
            "MinLength": "36",
            "Default": "708e0877-747d-4205-a83d-42841f90373c"
        },
		"KeyPair" : {
			"Description" : "Amazon EC2 Key Pair",
			"Type" : "AWS::EC2::KeyPair::KeyName"
		}		
    },
	"Mappings": {
		"Region2AMI": {
		  "us-east-1": { "64" : "ami-55ef662f" },
		  "us-east-2": { "64" : "ami-15e9c770" },
		  "us-west-2": { "64" : "ami-bf4193c7" }
		}
	 },
    "Resources": {
        "vpcBJWordPress": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.10.0.0/16",
                "InstanceTenancy": "default",
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BJ-VPC-WordPress"
                    }
                ]
            }
        },
        "sn1BJWordPress": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "10.10.0.0/24",
                "AvailabilityZone": {
                    "Ref": "AZ1"
                },
                "VpcId": {
                    "Ref": "vpcBJWordPress"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BJ-SN1-WordPress"
                    }
                ]
            }
        },
        "sn2BJWordPress": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "10.10.1.0/24",
                "AvailabilityZone": {
                    "Ref": "AZ2"
                },
                "VpcId": {
                    "Ref": "vpcBJWordPress"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BJ-SN2-WordPress"
                    }
                ]
            }
        },
        "igwBJWordPress": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BJ-IGW-WordPress"
                    }
                ]
            }
        },
        "doptBJWordPress": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BJ-DHCPO-WordPress"
                    }
                ],
                "DomainName": "ec2.internal",
                "DomainNameServers": [
                    "AmazonProvidedDNS"
                ]
            }
        },
        "aclBJWordPress": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "vpcBJWordPress"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BJ-ACL-WordPress"
                    }
                ]
            }
        },
        "rtbBJWordPress": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "vpcBJWordPress"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BJ-RTB-WordPress"
                    }
                ]
            }
        },
		"srtaBJWordPress1" : {
			 "Type" : "AWS::EC2::SubnetRouteTableAssociation",
			 "Properties" : {
				"SubnetId" : { "Ref" : "sn1BJWordPress" },
				"RouteTableId" : { "Ref" : "rtbBJWordPress" }
			 }
		},
		"srtaBJWordPress2" : {
			 "Type" : "AWS::EC2::SubnetRouteTableAssociation",
			 "Properties" : {
				"SubnetId" : { "Ref" : "sn2BJWordPress" },
				"RouteTableId" : { "Ref" : "rtbBJWordPress" }
			 }
		},
        "elbBJWordPress": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "sn2BJWordPress"
                    },
                    {
                        "Ref": "sn1BJWordPress"
                    }
                ],
                "HealthCheck": {
                    "HealthyThreshold": "10",
                    "Interval": "30",
                    "Target": "HTTP:80/healthcheck.html",
                    "Timeout": "5",
                    "UnhealthyThreshold": "2"
                },
                "ConnectionDrainingPolicy": {
                    "Enabled": "true",
                    "Timeout": "300"
                },
                "ConnectionSettings": {
                    "IdleTimeout": "60"
                },
                "CrossZone": "true",
                "SecurityGroups": [
                    {
                        "Ref": "sgdefaultBJWordPress"
                    },
                    {
                        "Ref": "sgBJWebTierWordPress"
                    }
                ],
                "Listeners": [
                    {
                        "InstancePort": "80",
                        "LoadBalancerPort": "80",
                        "Protocol": "HTTP",
                        "InstanceProtocol": "HTTP"
                    },
                    {
                        "InstancePort": "80",
                        "LoadBalancerPort": "443",
                        "Protocol": "HTTPS",
                        "InstanceProtocol": "HTTP",
						"SSLCertificateId": {
							"Fn::Join": [
								"",
								[
									"arn:aws:acm:",
									{
										"Ref": "AWS::Region"
									},
									":",
									{
										"Ref": "AWS::AccountId"
									},
									":certificate/",
									{
										"Ref": "DigitalCertificateId"
									}
								]
							]
						},
                        "PolicyNames": [
                            "ELBSecurityPolicy-2016-08"
                        ]
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BJ-ELB-WordPress"
                    }
                ]
            }
        },
        "rdsBJWordPress": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "AllocatedStorage": "20",
                "AllowMajorVersionUpgrade": "false",
                "AutoMinorVersionUpgrade": "true",
                "DBInstanceClass": "db.t2.micro",
                "Port": "3306",
                "PubliclyAccessible": "true",
                "StorageType": "gp2",
                "BackupRetentionPeriod": "28",
                "MasterUsername": { "Ref": "MySQLMasterUserName" },
                "MasterUserPassword": { "Ref": "MySQLMasterUserPassword" },
                "PreferredBackupWindow": "03:00-03:30",
                "PreferredMaintenanceWindow": "tue:08:59-tue:09:29",
                "DBName": "wordpress",
                "Engine": "mysql",
                "EngineVersion": "5.6.37",
                "LicenseModel": "general-public-license",
                "MultiAZ": "true",
                "DBSubnetGroupName": {
                    "Ref": "dbsubnetdefaultvpcBJWordPress"
                },
                "VPCSecurityGroups": [
                    {
                        "Ref": "sgBJDataTierWordPress"
                    }
                ],
                "Tags": [
                    {
                        "Key": "workload-type",
                        "Value": "production"
                    }
                ]
            }
        },
        "dbsubnetdefaultvpcBJWordPress": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Created from the RDS Management Console",
                "SubnetIds": [
                    {
                        "Ref": "sn1BJWordPress"
                    },
                    {
                        "Ref": "sn2BJWordPress"
                    }
                ]
            }
        },
        "sgBJDataTierWordPress": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Data Tier Security Group for WordPress",
                "VpcId": {
                    "Ref": "vpcBJWordPress"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BJ-SG-DataTier-WordPress"
                    }
                ]
            }
        },
        "sgdefaultBJWordPress": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "default VPC security group",
                "VpcId": {
                    "Ref": "vpcBJWordPress"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BJ-SG-Default-WordPress"
                    }
                ]
            }
        },
        "sgBJWebTierWordPress": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Web Tier Security Group for WordPress",
                "VpcId": {
                    "Ref": "vpcBJWordPress"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BJ-SG-WebTier-WordPress"
                    }
                ]
            }
        },
        "scalingDecreaseGroupSize": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "PolicyType": "StepScaling",
                "StepAdjustments": [
                    {
                        "ScalingAdjustment": -1,
                        "MetricIntervalLowerBound": 0
                    }
                ],
                "AutoScalingGroupName": {
                    "Ref": "asgBJWordPress"
                }
            }
        },
        "scalingIncreaseGroupSize": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "PolicyType": "StepScaling",
                "StepAdjustments": [
                    {
                        "ScalingAdjustment": 1,
                        "MetricIntervalLowerBound": 0
                    }
                ],
                "AutoScalingGroupName": {
                    "Ref": "asgBJWordPress"
                }
            }
        },
        "alarmawsec2BJWordPressHighCPUUtilization": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "ActionsEnabled": "true",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "EvaluationPeriods": "1",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "300",
                "Statistic": "Average",
                "Threshold": "75.0",
                "AlarmActions": [
                    {
                        "Ref": "scalingIncreaseGroupSize"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": "BJ-ASG-WordPress"
                    }
                ]
            }
        },
        "alarmawsec2BJWordPressLowCPUUtilization": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "ActionsEnabled": "true",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "EvaluationPeriods": "1",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "300",
                "Statistic": "Average",
                "Threshold": "50.0",
                "AlarmActions": [
                    {
                        "Ref": "scalingDecreaseGroupSize"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": "BJ-ASG-WordPress"
                    }
                ]
            }
        },
        "acl3": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "Protocol": "-1",
                "RuleAction": "allow",
                "RuleNumber": "100",
                "NetworkAclId": {
                    "Ref": "aclBJWordPress"
                }
            }
        },
        "acl4": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Protocol": "-1",
                "RuleAction": "allow",
                "RuleNumber": "100",
                "NetworkAclId": {
                    "Ref": "aclBJWordPress"
                }
            }
        },
        "subnetacl3": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "aclBJWordPress"
                },
                "SubnetId": {
                    "Ref": "sn2BJWordPress"
                }
            }
        },
        "subnetacl4": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "aclBJWordPress"
                },
                "SubnetId": {
                    "Ref": "sn1BJWordPress"
                }
            }
        },
        "gw2": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "vpcBJWordPress"
                },
                "InternetGatewayId": {
                    "Ref": "igwBJWordPress"
                }
            }
        },
        "route2": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "rtbBJWordPress"
                },
                "GatewayId": {
                    "Ref": "igwBJWordPress"
                }
            },
            "DependsOn": "gw2"
        },
        "dchpassoc2": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "VpcId": {
                    "Ref": "vpcBJWordPress"
                },
                "DhcpOptionsId": {
                    "Ref": "doptBJWordPress"
                }
            }
        },
        "ingress11": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgBJDataTierWordPress"
                },
                "IpProtocol": "tcp",
                "FromPort": "3306",
                "ToPort": "3306",
                "SourceSecurityGroupId": {
                    "Ref": "sgBJWebTierWordPress"
                }
            }
        },
        "ingress12": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgdefaultBJWordPress"
                },
                "IpProtocol": "-1",
                "SourceSecurityGroupId": {
                    "Ref": "sgdefaultBJWordPress"
                },
                "SourceSecurityGroupOwnerId": { "Ref" : "AWS::AccountId" }
            }
        },
        "ingress13": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgBJWebTierWordPress"
                },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "ingress14": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgBJWebTierWordPress"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "ingress15": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgBJWebTierWordPress"
                },
                "IpProtocol": "tcp",
                "FromPort": "443",
                "ToPort": "443",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "egress7": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgBJDataTierWordPress"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "egress8": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgdefaultBJWordPress"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "egress9": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgBJWebTierWordPress"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "MountTargetSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "vpcBJWordPress"
                },
                "GroupDescription": "Security group for mount target",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "2049",
                        "ToPort": "2049",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "fsBJWordPress": {
            "Type": "AWS::EFS::FileSystem",
            "Properties": {
                "PerformanceMode": "generalPurpose",
                "FileSystemTags": [
                    {
                        "Key": "Name",
                        "Value": "BJ-EFS-WordPress"
                    }
                ]
            }
        },
        "fsmt1BJWordPress": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": {
                    "Ref": "fsBJWordPress"
                },
                "SubnetId": {
                    "Ref": "sn1BJWordPress"
                },
				"SecurityGroups": [
					{
						"Ref": "sgdefaultBJWordPress"
					}
				]
            }
        },
        "fsmt2BJWordPress": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": {
                    "Ref": "fsBJWordPress"
                },
                "SubnetId": {
                    "Ref": "sn2BJWordPress"
                },
				"SecurityGroups": [
					{
						"Ref": "sgdefaultBJWordPress"
					}
				]
            }
        },
        "lcBJLCWordPress": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "AssociatePublicIpAddress": true,
                "ImageId": { 
				  "Fn::FindInMap": [
					"Region2AMI",
					{
					  "Ref": "AWS::Region"
					}, "64"
				  ]
				},
                "InstanceType": "t1.micro",
                "KeyName": { "Ref": "KeyPair" },
                "SecurityGroups": [
                    {
                        "Ref": "sgdefaultBJWordPress"
                    },
                    {
                        "Ref": "sgBJWebTierWordPress"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "EC2RoleInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
								"yum update -y\n",
								"yum install httpd php php-mysql -y\n",
								"service httpd start\n",
								"chkconfig httpd on\n",
								"wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",
								"wget https://s3.amazonaws.com/aws-codedeploy-us-east-1/cloudwatch/codedeploy_logs.conf\n",
								"chmod +x ./awslogs-agent-setup.py\n",
								"python awslogs-agent-setup.py -n -r ",
								{
									"Ref": "AWS::Region"
								},
								" -c s3://aws-codedeploy-us-east-1/cloudwatch/awslogs.conf\n",
								"mkdir -p /var/awslogs/etc/config\n",
								"cp codedeploy_logs.conf /var/awslogs/etc/config/\n",
								"service awslogs restart\n",
								"yum install -y ruby\n",
								"cd /home/ec2-user\n",
								"curl -O https://aws-codedeploy-",
								{
									"Ref": "AWS::Region"
								},
								".s3.amazonaws.com/latest/install\n",
								"chmod +x ./install\n",
								"./install auto\n",								
								"yum install -y nfs-utils\n",
								"mkdir -p /var/www/html/wp-content",
								"\n",
								"echo \"",
								{
									"Ref": "fsBJWordPress"
								},
								".efs.",
								{
									"Ref": "AWS::Region"
								},
								".amazonaws.com:/ /var/www/html/wp-content nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0\" >> /etc/fstab\n",
								"mount -a -t nfs4\n",
								"chown -R apache:apache /var/www/html/wp-content",
								"\n",
								"chmod -R 777 /var/www/html/wp-content",
								"\n"
                            ]
                        ]
                    }
                }
            }
        },
        "asgBJWordPress": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": [
                "fsmt1BJWordPress",
                "fsmt2BJWordPress",
                "gw2"
            ],
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Ref": "AZ1"
                    },
                    {
                        "Ref": "AZ2"
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "sn1BJWordPress"
                    },
                    {
                        "Ref": "sn2BJWordPress"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "lcBJLCWordPress"
                },
                "MinSize": {
                    "Ref": "AsgMinSize"
                },
                "MaxSize": {
                    "Ref": "AsgMaxSize"
                },
                "DesiredCapacity": {
                    "Ref": "AsgMinSize"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "elbBJWordPress"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BJ-ASG-EC2-WordPress",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
		"iamRoleCodeDeployBJWordPress": {
		 "Type": "AWS::IAM::Role",
		 "Properties": {
			"AssumeRolePolicyDocument": {
			   "Version" : "2012-10-17",
			   "Statement": [ {
				  "Effect": "Allow",
				  "Principal": {
					 "Service": [ "codedeploy.amazonaws.com" ]
				  },
				  "Action": [ "sts:AssumeRole" ]
			   } ]
			},
			"Path": "/"
		 }
		},
		"CodeDeployRolePolicies": {
		 "Type": "AWS::IAM::Policy",
		 "Properties": {
			"PolicyName": "AWSCodeDeployRole",
			"PolicyDocument": {
			   "Version" : "2012-10-17",
			   "Statement": [ {
				  "Effect": "Allow",
				  "Action": [
						"autoscaling:CompleteLifecycleAction",
						"autoscaling:DeleteLifecycleHook",
						"autoscaling:DescribeAutoScalingGroups",
						"autoscaling:DescribeLifecycleHooks",
						"autoscaling:PutLifecycleHook",
						"autoscaling:RecordLifecycleActionHeartbeat",
						"autoscaling:CreateAutoScalingGroup",
						"autoscaling:UpdateAutoScalingGroup",
						"autoscaling:EnableMetricsCollection",
						"autoscaling:DescribeAutoScalingGroups",
						"autoscaling:DescribePolicies",
						"autoscaling:DescribeScheduledActions",
						"autoscaling:DescribeNotificationConfigurations",
						"autoscaling:DescribeLifecycleHooks",
						"autoscaling:SuspendProcesses",
						"autoscaling:ResumeProcesses",
						"autoscaling:AttachLoadBalancers",
						"autoscaling:PutScalingPolicy",
						"autoscaling:PutScheduledUpdateGroupAction",
						"autoscaling:PutNotificationConfiguration",
						"autoscaling:PutLifecycleHook",
						"autoscaling:DescribeScalingActivities",
						"autoscaling:DeleteAutoScalingGroup",
						"ec2:DescribeInstances",
						"ec2:DescribeInstanceStatus",
						"ec2:TerminateInstances",
						"tag:GetTags",
						"tag:GetResources",
						"sns:Publish",
						"cloudwatch:DescribeAlarms",
						"cloudwatch:PutMetricAlarm",
						"elasticloadbalancing:DescribeLoadBalancers",
						"elasticloadbalancing:DescribeInstanceHealth",
						"elasticloadbalancing:RegisterInstancesWithLoadBalancer",
						"elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
						"elasticloadbalancing:DescribeTargetGroups",
						"elasticloadbalancing:DescribeTargetHealth",
						"elasticloadbalancing:RegisterTargets",
						"elasticloadbalancing:DeregisterTargets"
					],	
				  "Resource": "*"
			   } ]
			},
			"Roles": [ {
			   "Ref": "iamRoleCodeDeployBJWordPress"
			} ]
		 }
		},
		"CodeDeployRoleInstanceProfile": {
		 "Type": "AWS::IAM::InstanceProfile",
		 "Properties": {
			"Path": "/",
			"Roles": [ {
			   "Ref": "iamRoleCodeDeployBJWordPress"
			} ]
		 }
		},
		"iamRoleEC2BJWordPress": {
		 "Type": "AWS::IAM::Role",
		 "Properties": {
			"AssumeRolePolicyDocument": {
			   "Version" : "2012-10-17",
			   "Statement": [ {
				  "Effect": "Allow",
				  "Principal": {
					 "Service": [ "ec2.amazonaws.com" ]
				  },
				  "Action": [ "sts:AssumeRole" ]
			   } ]
			},
			"Path": "/"
		 }
		},
		"EC2RolePolicies1": {
		 "Type": "AWS::IAM::Policy",
		 "Properties": {
			"PolicyName": "InstanceRole",
			"PolicyDocument": {
				   "Version" : "2012-10-17",
				   "Statement": [ {
					  "Effect": "Allow",
					  "Action": "*",
					  "Resource": "*"
				   } ]
				},
				"Roles": [ {
				   "Ref": "iamRoleEC2BJWordPress"
				} ]
			}
		},	
		"EC2RolePolicies2": {
		 "Type": "AWS::IAM::Policy",
		 "Properties": {
			"PolicyName": "CloudWatchLogsFullAccess",
			"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
					{
						"Effect": "Allow",
						"Action": [ "logs:*" ],
						"Resource": "*"
					}
					]
				},
				"Roles": [ {
				   "Ref": "iamRoleEC2BJWordPress"
				} ]
			}
		},
		"EC2RoleInstanceProfile": {
		 "Type": "AWS::IAM::InstanceProfile",
		 "Properties": {
			"Path": "/",
			"Roles": [ {
			   "Ref": "iamRoleEC2BJWordPress"
			} ]
		 }
		}    
	},
    "Outputs": {
        "MountTargetID": {
            "Description": "Mount target ID",
            "Value": {
                "Ref": "fsmt2BJWordPress"
            }
        },
        "FileSystemID": {
            "Description": "File system ID",
            "Value": {
                "Ref": "fsBJWordPress"
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Designer": {}
    }
}
